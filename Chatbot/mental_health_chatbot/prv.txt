import json
import re
import random
from typing import Dict, List, Optional
import os

class ConversationContext:
    """Menyimpan status percakapan saat ini, termasuk alur aktif dan langkahnya."""
    def __init__(self):
        self.active_flow: Optional[str] = None
        self.flow_step: int = 0
        self.data: Dict = {}

    def start_flow(self, flow_name: str):
        """Memulai alur percakapan baru, mereset yang lama."""
        self.active_flow = flow_name
        self.flow_step = 0
        self.data = {}
        print(f"INFO: Alur baru dimulai: '{flow_name}'.")

    def advance_flow(self):
        """Melanjutkan ke langkah berikutnya dalam alur."""
        if self.active_flow:
            self.flow_step += 1
            print(f"INFO: Alur '{self.active_flow}' berlanjut ke langkah {self.flow_step}.")

    def reset(self):
        """Mereset seluruh konteks, mengakhiri semua alur."""
        print("INFO: Konteks percakapan direset total.")
        self.__init__()

class MentalHealthChatbot:
    """
    Versi yang diperbaiki dengan kemampuan lebih baik dalam menangani input bebas
    dan mengarahkan pengguna ke topik yang relevan.
    """
    def __init__(self):
        self.data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')
        self.knowledge_base = self._load_data('knowledge_base.json')
        self.qa_pairs = self._load_data('qa_pairs.json')
        self.emergency_data = self._load_data('emergency.json')
        
        self.context = ConversationContext()
        self._initialize_guided_flows()
        self._initialize_topic_mapping()
        self.emergency_keywords = self.emergency_data.get('emergency_keywords', [])

    def _load_data(self, filename: str) -> Dict:
        """Memuat data dari file JSON."""
        file_path = os.path.join(self.data_dir, filename)
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"KESALAHAN FATAL saat memuat {file_path}: {e}")
            return {}

    def _initialize_topic_mapping(self):
        """Membuat mapping kata kunci ke topik untuk mengenali input bebas."""
        self.topic_keywords = {
            "stres": ["stres", "stress", "tertekan", "beban", "tekanan", "kewalahan"],
            "kecemasan": ["cemas", "khawatir", "gelisah", "anxiety", "panik", "takut", "gugup"],
            "depresi": ["sedih", "hampa", "kosong", "putus asa", "tidak bersemangat", "murung", "depresi"],
            "marah": ["marah", "kesal", "jengkel", "emosi", "geram", "frustrasi", "benci"],
            "overthinking": ["overthinking", "pikiran berputar", "tidak bisa berhenti mikir", "kepikiran terus"],
            "insomnia": ["tidak bisa tidur", "susah tidur", "insomnia", "begadang", "sulit tidur"],
            "perpisahan": ["putus", "pisah", "patah hati", "kehilangan", "ditinggal", "berakhir"],
            "kesepian": ["kesepian", "sendiri", "lonely", "terisolasi", "tidak ada teman"],
            "masalah_keluarga": ["keluarga", "orang tua", "adik", "kakak", "konflik keluarga"],
            "media_sosial": ["media sosial", "instagram", "facebook", "tiktok", "sosmed", "comparing"],
            "quarter_life_crisis": ["bingung hidup", "tidak tahu arah", "quarter life", "masa depan"],
            "motivasi": ["tidak semangat", "malas", "tidak ada motivasi", "kehilangan semangat", "kemenangan", "berprestasi", "sukses"],
            "self_care": ["merawat diri", "self care", "lelah", "butuh istirahat", "me time"],
            "trauma": ["trauma", "masa lalu", "terluka", "sakit hati mendalam"],
            "burnout": ["burnout", "kelelahan kerja", "jenuh kerja", "capek bekerja"],
            # PERBAIKAN: Tambahkan mapping untuk BPD
            "bpd": ["bpd", "borderline", "borderline personality disorder", "gangguan kepribadian", "kepribadian borderline"]
        }

    def _find_relevant_topic(self, text: str) -> Optional[str]:
        """Mencari topik yang paling relevan dari input pengguna."""
        text_lower = text.lower()
        
        # Hitung skor untuk setiap topik
        topic_scores = {}
        for topic, keywords in self.topic_keywords.items():
            score = 0
            for keyword in keywords:
                if keyword in text_lower:
                    score += 1
            if score > 0:
                topic_scores[topic] = score
        
        # Kembalikan topik dengan skor tertinggi
        if topic_scores:
            return max(topic_scores, key=topic_scores.get)
        return None

    def _initialize_guided_flows(self):
        """Mendaftarkan SEMUA alur percakapan terpandu secara eksplisit."""
        self._guided_flows = {
            "stres": {"steps": [self._stres_step0, self._stres_step1]},
            "kecemasan": {"steps": [self._kecemasan_step0, self._kecemasan_step1]},
            "depresi": {"steps": [self._depresi_step0, self._depresi_step1]},
            "marah": {"steps": [self._marah_step0, self._marah_step1]},
            "overthinking": {"steps": [self._overthinking_step0, self._overthinking_step1, self._overthinking_step2]},
            "insomnia": {"steps": [self._insomnia_step0, self._insomnia_step1]},
            "perpisahan": {"steps": [self._perpisahan_step0, self._perpisahan_step1]},
            "kesepian": {"steps": [self._kesepian_step0, self._kesepian_step1]},
            "masalah_keluarga": {"steps": [self._masalah_keluarga_step0, self._masalah_keluarga_step1]},
            "media_sosial": {"steps": [self._media_sosial_step0, self._media_sosial_step1]},
            "quarter_life_crisis": {"steps": [self._qlc_step0, self._qlc_step1]},
            "motivasi": {"steps": [self._motivasi_step0, self._motivasi_step1]},
            "self_care": {"steps": [self._self_care_step0, self._self_care_step1]},
            "bpd": {"steps": [self._bpd_step0]},
            "trauma": {"steps": [self._trauma_step0, self._trauma_step1]},
            "burnout": {"steps": [self._burnout_step0, self._burnout_step1]},
        }

    def _get_contextual_response(self, text: str, suggested_topic: str) -> str:
        """Memberikan respons kontekstual berdasarkan topik yang disarankan."""
        responses = {
            "motivasi": [
                f"Sepertinya kamu sedang mencari motivasi atau ingin merasakan pencapaian. Aku paham perasaan itu. Yuk, kita bahas lebih dalam di topik '<strong>Motivasi</strong>' - di sana kita bisa bicara tentang cara membangun semangat dan meraih kemenangan kecil.",
                f"Aku mendengar keinginanmu untuk merasakan kemenangan dan sukses. Perasaan itu sangat wajar! Mari kita jelajahi topik '<strong>Motivasi</strong>' untuk membantu kamu menemukan cara mencapai tujuan-tujuanmu."
            ],
            "stres": [
                f"Terdengar seperti kamu sedang menghadapi tekanan. Mari kita bahas di topik '<strong>Stres</strong>' untuk menemukan cara mengelola beban yang kamu rasakan."
            ],
            "self_care": [
                f"Sepertinya kamu butuh waktu untuk merawat diri. Topik '<strong>Self Care</strong>' bisa membantu kita membahas cara-cara untuk mengisi ulang energimu."
            ],
            # PERBAIKAN: Tambahkan respons khusus untuk BPD
            "bpd": [
                f"Aku paham kamu ingin tahu tentang Borderline Personality Disorder (BPD). Mari kita bahas informasi mengenai '<strong>BPD</strong>' agar kamu mendapat pemahaman yang akurat."
            ]
        }
        
        topic_responses = responses.get(suggested_topic, [
            f"Sepertinya yang kamu rasakan berkaitan dengan '<strong>{suggested_topic.replace('_', ' ').title()}</strong>'. Yuk kita bahas lebih dalam di topik tersebut."
        ])
        
        return random.choice(topic_responses)

    # --- Definisi Setiap Langkah Alur (sama seperti sebelumnya) ---
    
    def _stres_step0(self, _=None):
        self.context.advance_flow()
        return "Tentu, mari kita bahas tentang stres. Aku dengar kamu sedang merasa tertekan. Perasaan itu valid.<br><br>Boleh ceritakan sedikit, apa hal spesifik yang paling membuatmu merasa stres akhir-akhir ini?"
    def _stres_step1(self, user_input):
        self.context.reset()
        return f"Terima kasih sudah berbagi. Menghadapi '{user_input}' memang tidak mudah. Mengakui sumber stres adalah langkah pertama yang hebat.<br><br>Ingat, fokus pada satu hal kecil yang bisa kamu kontrol saat ini. Kamu tidak harus menyelesaikan semuanya sekaligus."

    def _kecemasan_step0(self, _=None):
        self.context.advance_flow()
        return "Mari kita bicara tentang kecemasan. Rasa khawatir dan gelisah itu sangat menguras energi.<br><br>Saat rasa cemas itu datang, apa yang biasanya kamu rasakan di tubuhmu? (Contoh: jantung berdebar, napas pendek, tangan dingin)"
    def _kecemasan_step1(self, user_input):
        self.context.reset()
        return "Terima kasih telah menjelaskannya. Mengenali respons tubuh adalah langkah penting. Saat itu terjadi lagi, coba satu hal ini: Tarik napas perlahan selama 4 detik, tahan 4 detik, lalu hembuskan perlahan selama 6 detik. Lakukan beberapa kali. Ini dapat membantu menenangkan sistem sarafmu."

    def _depresi_step0(self, _=None):
        self.context.advance_flow()
        return "Aku di sini bersamamu untuk membahas perasaan sedih dan hampa. Kamu tidak sendirian.<br><br>Selain merasa sedih, adakah aktivitas yang dulu kamu nikmati tapi sekarang terasa tidak menarik lagi?"
    def _depresi_step1(self, user_input):
        self.context.reset()
        return "Kehilangan minat atau 'anhedonia' adalah gejala yang sangat umum. Terima kasih sudah jujur. Tidak apa-apa jika saat ini terasa berat. Bisakah kita pikirkan satu hal SANGAT kecil yang mungkin bisa kamu coba lakukan besok? (Contoh: duduk di luar selama 5 menit, atau mendengarkan satu lagu favorit)."
    
    def _marah_step0(self, _=None):
        self.context.advance_flow()
        return "Rasa marah dan frustrasi adalah emosi yang kuat. Tidak apa-apa merasakannya.<br><br>Jika kamu nyaman, coba gambarkan: kemarahan ini terasa seperti apa? Apakah seperti api yang membakar, atau tekanan yang akan meledak?"
    def _marah_step1(self, user_input):
        self.context.reset()
        return "Deskripsi yang kuat. Terkadang, di balik kemarahan ada perasaan lain seperti sakit hati atau ketidakadilan. Mengakui emosi ini adalah langkah awal untuk mengelolanya secara sehat, bukan menekannya."
        
    def _overthinking_step0(self, _=None):
        self.context.advance_flow()
        return "Tentu, mari kita coba jinakkan pikiran yang berputar-putar itu. Overthinking sangat melelahkan.<br><br>Langkah pertama, coba tuliskan satu pikiran negatif spesifik yang paling sering muncul di kepalamu."
    def _overthinking_step1(self, user_input):
        self.context.data['negative_thought'] = user_input
        self.context.advance_flow()
        return f"Oke, pikiranmu adalah: '<i>{user_input}</i>'.<br><br>Sekarang, mari kita uji. Apa satu bukti kuat yang mendukung pikiran ini? Dan apa satu bukti kuat yang membantahnya?"
    def _overthinking_step2(self, user_input):
        self.context.reset()
        return "Bagus sekali. Kamu sudah mulai melihatnya dari dua sisi. Ini adalah keterampilan yang hebat. Latihan ini membantu otak kita untuk tidak langsung percaya pada pikiran negatif pertama yang muncul."

    def _insomnia_step0(self, _=None):
        self.context.advance_flow()
        return "Sulit tidur memang sangat mengganggu. Mari kita lihat.<br><br>Apa yang biasanya ada di pikiranmu atau kamu lakukan satu jam sebelum mencoba untuk tidur?"
    def _insomnia_step1(self, user_input):
        self.context.reset()
        return "Terima kasih. Seringkali, apa yang kita lakukan sebelum tidur (screen time, memikirkan kerjaan) sangat berpengaruh. Menciptakan 'zona tenang' satu jam sebelum tidur tanpa gadget bisa membuat perbedaan besar."

    def _perpisahan_step0(self, _=None):
        self.context.advance_flow()
        return "Patah hati karena perpisahan itu nyata dan menyakitkan. Perasaanmu sangat valid.<br><br>Siapa yang kamu rindukan saat ini? Kamu tidak perlu menyebut nama, cukup perannya dalam hidupmu (misalnya: 'sahabat baik' atau 'pasangan')."
    def _perpisahan_step1(self, user_input):
        self.context.reset()
        return f"Kehilangan seorang {user_input} meninggalkan ruang kosong. Izinkan dirimu untuk berduka. Tidak ada batas waktu untuk pulih. Merawat dirimu sendiri saat ini adalah prioritas utama."

    def _kesepian_step0(self, _=None):
        self.context.advance_flow()
        return "Perasaan kesepian itu berat, seolah tak terlihat. Aku melihatmu dan aku di sini mendengarkan.<br><br>Jika kamu bisa memilih, koneksi seperti apa yang paling kamu dambakan saat ini?"
    def _kesepian_step1(self, user_input):
        self.context.reset()
        return f"Mendambakan '{user_input}' itu sangat manusiawi. Langkah pertama untuk keluar dari kesepian adalah dengan jujur pada keinginan itu. Terima kasih sudah terbuka."
    
    def _masalah_keluarga_step0(self, _=None):
        self.context.advance_flow()
        return "Konflik keluarga bisa sangat menguras energi dan menyakitkan karena terjadi di tempat yang seharusnya aman.<br><br>Tanpa perlu detail, perasaan apa yang paling dominan saat kamu memikirkan masalah ini? (Contoh: marah, sedih, lelah, kecewa)"
    def _masalah_keluarga_step1(self, user_input):
        self.context.reset()
        return f"Merasa {user_input} adalah respons yang sangat wajar dalam situasi seperti itu. Ingat, kamu berhak memiliki batasan untuk melindungi kedamaian mentalmu, bahkan dari keluarga."

    def _media_sosial_step0(self, _=None):
        self.context.advance_flow()
        return "Lelah dengan media sosial itu sangat umum sekarang. Terkadang apa yang kita lihat di sana membuat kita merasa kurang.<br><br>Aplikasi atau konten seperti apa yang paling sering membuatmu merasa buruk tentang dirimu sendiri?"
    def _media_sosial_step1(self, user_input):
        self.context.reset()
        return "Itu wawasan yang bagus. Menyadari pemicunya adalah langkah besar. Mungkin kamu bisa mencoba fitur 'mute' atau 'unfollow' akun-akun tersebut? Kamu berhak menciptakan linimasa yang mendukung, bukan yang menjatuhkan."

    def _qlc_step0(self, _=None):
        self.context.advance_flow()
        return "Ah, 'quarter-life crisis'. Merasa bingung, tersesat, dan membandingkan diri dengan orang lain. Sangat umum dan sangat berat.<br><br>Dari semua aspek (karir, hubungan, tujuan hidup), mana yang terasa paling tidak pasti saat ini?"
    def _qlc_step1(self, user_input):
        self.context.reset()
        return f"Fokus pada ketidakpastian di '{user_input}' itu bisa membuat kewalahan. Ingat, tidak ada orang yang punya semua jawaban. Tidak apa-apa untuk tidak tahu. Langkahmu saat ini adalah bertahan dan terus mencoba hal-hal kecil."

    def _motivasi_step0(self, _=None):
        self.context.advance_flow()
        return "Kehilangan motivasi itu seperti mobil kehabisan bensin. Bukan mobilnya yang rusak, hanya butuh bahan bakar.<br><br>Apa satu hal yang jika berhasil kamu lakukan, akan membuatmu merasa sedikit lebih baik, sekecil apapun itu?"
    def _motivasi_step1(self, user_input):
        self.context.reset()
        return f"'{user_input}' terdengar seperti tujuan yang bagus. Coba pecah menjadi langkah yang SANGAT KECIL. Apa langkah paling pertama yang bisa kamu ambil untuk itu?"

    def _self_care_step0(self, _=None):
        self.context.advance_flow()
        return "Merawat diri atau 'self-care' bukan kemewahan, tapi kebutuhan. Ini tentang mengisi kembali energimu.<br><br>Apa aktivitas self-care favoritmu, atau apa yang ingin kamu coba lakukan untuk dirimu sendiri?"
    def _self_care_step1(self, user_input):
        self.context.reset()
        return f"Melakukan '{user_input}' terdengar sangat menenangkan. Aku harap kamu bisa meluangkan waktu untuk itu. Kamu pantas mendapatkannya."

    def _trauma_step0(self, _=None):
        self.context.advance_flow()
        return "Membicarakan trauma itu berat, dan aku di sini untuk mendengarkan dengan hati-hati. Keamananmu adalah yang utama.<br><br>Saat ini, apa yang kamu butuhkan untuk merasa sedikit lebih aman atau tenang?"
    def _trauma_step1(self, user_input):
        self.context.reset()
        return "Terima kasih. Fokus pada kebutuhanmu saat ini ('ingin merasa aman') adalah hal yang tepat. Jika kamu merasa kewalahan, teknik grounding (menyebutkan 5 benda yang kamu lihat) bisa membantu menarikmu kembali ke saat ini."
    
    def _burnout_step0(self, _=None):
        self.context.advance_flow()
        return "Kelelahan kerja atau 'burnout' lebih dari sekadar lelah biasa. Ini adalah kelelahan emosional, fisik, dan mental yang mendalam.<br><br>Gejala mana yang paling kamu rasakan: kelelahan total, sinisme/sikap negatif terhadap pekerjaan, atau merasa tidak kompeten?"
    def _burnout_step1(self, user_input):
        self.context.reset()
        return f"Merasakan '{user_input}' adalah tanda jelas dari burnout. Ini bukan salahmu, ini adalah respons terhadap stres kronis. Istirahat yang sesungguhnya—bukan hanya libur tapi benar-benar lepas dari pekerjaan—sangatlah penting."

    def _bpd_step0(self, _=None):
        self.context.reset()
        info = self.knowledge_base.get('bpd', {})
        definisi = info.get('definition', 'Informasi tidak ditemukan.')
        return f"Tentu, ini adalah informasi umum mengenai <strong>Borderline Personality Disorder (BPD)</strong>.<br><br><strong>Definisi:</strong> {definisi}<br><br>Ini adalah kondisi kompleks yang memerlukan diagnosis dan perawatan dari profesional. Jika kamu merasa ini relevan, berbicara dengan psikolog adalah langkah terbaik."

    # ======================================================================
    # LOGIKA UTAMA CHATBOT (DIPERBAIKI)
    # ======================================================================
    
    def _check_emergency(self, text: str) -> Optional[str]:
        text_lower = text.lower()
        for keyword in self.emergency_keywords:
            if re.search(r'\b' + re.escape(keyword.lower()) + r'\b', text_lower):
                return self.emergency_data.get('emergency_responses', {}).get('bunuh_diri')
        return None

    def generate_response(self, input_text: str) -> str:
        """Logika utama yang diperbaiki dengan kemampuan mengenali topik dari input bebas."""
        
        # 1. Cek Kondisi Darurat (Prioritas Tertinggi)
        if (emergency_response := self._check_emergency(input_text)):
            self.context.reset()
            return emergency_response

        # 2. Cek apakah input adalah kunci untuk MEMULAI alur baru.
        input_key = input_text.lower().strip()
        if input_key in self._guided_flows:
            self.context.start_flow(input_key)
            step_function = self._guided_flows[input_key]['steps'][0]
            return step_function()

        # 3. Jika sudah ada alur aktif, LANJUTKAN alur tersebut.
        if self.context.active_flow:
            flow_name = self.context.active_flow
            step_index = self.context.flow_step
            flow_def = self._guided_flows.get(flow_name, {})
            
            if flow_def and step_index < len(flow_def['steps']):
                step_function = flow_def['steps'][step_index]
                response = step_function(input_text)
                
                if not self.context.active_flow:
                    response += "<br><br>Terima kasih sudah berbagi. Apakah ada topik lain yang ingin kita diskusikan dari daftar di samping?"
                return response
            else:
                self.context.reset()

        # 4. PERBAIKAN: Coba kenali topik dari input bebas
        suggested_topic = self._find_relevant_topic(input_text)
        if suggested_topic:
            # PERBAIKAN: Jika topik yang dikenali adalah BPD, langsung mulai flow-nya
            if suggested_topic == "bpd":
                self.context.start_flow("bpd")
                step_function = self._guided_flows["bpd"]['steps'][0]
                return step_function()
            else:
                return self._get_contextual_response(input_text, suggested_topic)

        # 5. Cek respons dari qa_pairs untuk obrolan umum
        qa_response = self._get_qa_response(input_text)
        if qa_response:
            return qa_response

        # 6. Fallback yang lebih ramah
        return self._get_smart_fallback_response()

    def _get_qa_response(self, text: str) -> Optional[str]:
        """Mencari respons dari qa_pairs.json untuk percakapan umum."""
        text_lower = text.lower()
        for category, data in self.qa_pairs.items():
            for pattern in data.get('patterns', []):
                if re.search(r'\b' + re.escape(pattern.lower()) + r'\b', text_lower):
                    return random.choice(data.get('responses', []))
        return None

    def _get_smart_fallback_response(self) -> str:
        """Memberikan respons fallback yang lebih ramah."""
        return random.choice([
            "Aku ingin membantu dengan lebih baik. Bisakah kamu ceritakan sedikit lebih detail tentang apa yang sedang kamu rasakan? Atau kamu bisa memilih salah satu topik dari daftar di samping.",
            "Terima kasih sudah berbagi. Aku berusaha memahami, tapi mungkin kamu bisa memilih topik yang paling sesuai dengan perasaanmu dari daftar yang tersedia?",
            "Aku di sini untuk mendengarkan. Untuk bisa memberikan dukungan yang tepat, yuk kita mulai dengan memilih topik yang paling relevan dengan situasimu saat ini."
        ])
        
    def get_hotlines(self) -> List[Dict]:
        """Mengambil daftar hotline dari data untuk ditampilkan di UI."""
        return self.emergency_data.get('hotlines', [])